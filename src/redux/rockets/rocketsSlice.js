/* eslint-disable camelcase */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const url = 'https://api.spacexdata.com/v3/rockets';

function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

const selectAttributes = ({
  id, rocket_name, description, flickr_images,
}) => ({
  id, rocket_name, description, flickr_images, reserved: false,
});

const rocketsAsync = createAsyncThunk(
  'rockets/fetchRockets',
  async () => {
    const response = await fetch(url);
    const fetchedData = await response.json();
    const data = fetchedData.map((x) => selectAttributes(x));
    await timeout(1000);
    return data;
  },
);

const rocketsSlice = createSlice({
  name: 'rockets',
  initialState: { status: '', value: [] },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    book: (state, action) => {
      const id = action.payload;
      const newValue = state.value.map((rocket) => {
        if (rocket.id !== id) return rocket;
        return { ...rocket, reserved: true };
      });
      const newState = { ...state, value: newValue };
      return newState;
    },
    cancel: (state, action) => {
      const id = action.payload;
      const newValue = state.value.map((rocket) => {
        if (rocket.id !== id) return rocket;
        return { ...rocket, reserved: false };
      });
      const newState = { ...state, value: newValue };
      return newState;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(rocketsAsync.pending, (state) => {
        const newState = { ...state };
        newState.status = 'loading';
        return newState;
      })
      .addCase(rocketsAsync.fulfilled, (state, action) => {
        const newState = { ...state };
        newState.status = 'loaded';
        newState.value = action.payload;
        return newState;
      });
  },
});

export const { book, cancel } = rocketsSlice.actions;

export default rocketsSlice.reducer;

export { rocketsAsync };
